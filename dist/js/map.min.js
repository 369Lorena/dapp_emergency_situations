var map;
var markers = [];
var marker;


function initAutocomplete()
{
    map = new google.maps.Map(document.getElementById('map'),
    {
      center: {lat: 28.272515, lng: -16.642512},
      mapTypeControl: false,
      fullscreenControl: false,
      zoom: 10,
      mapTypeId: 'roadmap'
    });

    // Create the search box and link it to the UI element.
    var input = document.getElementById('pac-input');
    var searchBox = new google.maps.places.SearchBox(input);
    map.controls[google.maps.ControlPosition.TOP_CENTER].push(input);

    // Bias the SearchBox results towards current map's viewport.
    map.addListener('bounds_changed', function() 
    {
      searchBox.setBounds(map.getBounds());
    });

    markers = [];
    // Listen for the event fired when the user selects a prediction and retrieve
    // more details for that place.
    searchBox.addListener('places_changed', function()
    {
      var places = searchBox.getPlaces();

      if (places.length == 0)
      {
        return;
      }

        // Clear out the old markers.
      markers.forEach(function(marker)
      {
        marker.setMap(null);
      });
      markers = [];

      // For each place, get the icon, name and location.
      var bounds = new google.maps.LatLngBounds();
      places.forEach(function(place)
      {
        if (!place.geometry)
        {
          console.log('Returned place contains no geometry');
          return;
        }
        var icon =
        {
          url: place.icon,
          size: new google.maps.Size(71, 71),
          origin: new google.maps.Point(0, 0),
          anchor: new google.maps.Point(17, 34),
          scaledSize: new google.maps.Size(25, 25)
        };
        console.log("place.icon = " + place.icon);
        console.log("place.icon = " + place.icon);
        // Create a marker for each place.
        markers.push(new google.maps.Marker
        ({
          map: map,
          icon: icon,
          title: place.name,
          position: place.geometry.location
        }));

        if (place.geometry.viewport)
        {
          // Only geocodes have viewport.
          bounds.union(place.geometry.viewport);
        } 
        else
        {
          bounds.extend(place.geometry.location);
        }
        $("input[name=latitude]").val(place.geometry.location.lat());
        $("input[name=longitude]").val(place.geometry.location.lng());
      });
      map.fitBounds(bounds);
    });
}
var x = document.getElementById('error_with_geolocation');

function getLocation()
{

    if (navigator.geolocation)
    {


        navigator.geolocation.getCurrentPosition(writePosition);

    }
    else
    {
        x.innerHTML = "La geolocalizaci√≥n no es soportada por este navegador web";
    }

}
function writePosition(position) 
{
    $("input[name=latitude]").val(position.coords.latitude);
    $("input[name=longitude]").val(position.coords.longitude);
    $("input[name=google_maps_input]").val(position.coords.latitude+','+position.coords.longitude);


    var icon =
        {
            url: "https://maps.gstatic.com/mapfiles/place_api/icons/geocode-71.png",
            size: new google.maps.Size(71, 71),
            origin: new google.maps.Point(0, 0),
            anchor: new google.maps.Point(17, 34),
            scaledSize: new google.maps.Size(25, 25)
        };

    // Create a marker for each place.
    marker = new google.maps.Marker
    ({
        map: map,
        icon: icon,
        title: "lala",
        position: {lat: position.coords.latitude, lng: position.coords.longitude}
    });
    markers.push(marker);


    var center = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
    // using global variable:
    map.panTo(center);
    map.fitBounds(center);

}